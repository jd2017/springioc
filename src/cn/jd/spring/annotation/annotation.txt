注解：
	1、注解是用来做标记
	2、注解不能单独存在
		public enum ElementType {
		
		    //指的是类和接口
		    TYPE,
		    
		    //属性
		    FIELD,
		
		    //方法
		    METHOD,
		    		
		    //方法的参数
		    PARAMETER,
		
		    //构造器
		    CONSTRUCTOR,
		
		    //局部变量
		    LOCAL_VARIABLE,
		
		    //注解类型
		    ANNOTATION_TYPE,
		    //包
		    PACKAGE
		}
	3、注解必须标注在类上的某一个部分
	4、自定义注解
		@interface说明该类是一个注解类
		必须标明该注解的作用域范围
		必须标明该注解的生命周期
		/**
		 * RetentionPolicy.RUNTIME
		 *    在java,class,runtime中都可以使用
		 * RetentionPolicy.CLASS
		 *    在java,class文件中可以使用
		 * RetentionPolicy.SOURCE
		 *    只能在java文件中起作用
		 */
	5、写一个注解解析器
	    	解析注解的
	    如果要想得到一个类的注解，先得到class,得到方法上的注解，先得到method

二、利用注解进行di 赋值操作
   1、把person和student放入到spring容器中
   2、在spring的配置文件中
   		1、引入命名空间
   			xmlns:context="http://www.springframework.org/schema/context"
   			http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
        2、引入依赖注入的注解解析器
        	<context:annotation-config></context:annotation-config>
   3、在java文件中
   		public class Person {
			@Resource
			private Student student;
			private Long pid;
			public Student getStudent() {
				return student;
			}
			public Long getPid() {
				return pid;
			}
		}
		利用@Resource该注解进行注入
原理：
    1、启动spring容器
    2、spring容器会为person和student创建对象
    3、spring容器会解析
    	<context:annotation-config></context:annotation-config>
    	会检查所有的在spring容器中的bean
    4、看这些bean的属性上是否有@Resource注解
                        会检查该注解的name的属性的值
                            如果为""
                	则会根据该注解所在的属性的名称和spring容器中的id值做匹配
                	      如果匹配成功，则赋值，如果匹配不成功，则按照类型进行匹配,如果匹配成功，则赋值，如果匹配不成功，则报错
                           如果不为""
                   	则根据该注解的name的属性的值和spring容器中的id值做匹配，
                   	   成功，则赋值，不成功，则报错   	   
注解和xml:
   xml效率比较高，书写比较麻烦
        注解效率比较低，书写比较简单
        
注意:基本类型和集合不能利用注解赋值 

三、类扫描scan：
步骤:
   1、在Person类中
   		@Component("person")
		public class Person {
			@Resource(name="student")
			private Student studen;
			
			public Student getStudent() {
				return studen;
			}
		}
   2、在Student类中同样
   3、在spring的配置文件中
   		<context:component-scan 
   			base-package="com.itheima08.spring.scan"></context:component-scan>
原理：
    1、启动spring容器
    2、在base-package指定的包及子包中查找哪些类上面加有@Component
    3、如果该类加有该注解
    3.1 @Component("person")
		public class Person {
		}  	
		==
		<bean id="person" class="...Person">	
	3.2	@Component("p")
		public class Person {
		}  	
		==
		<bean id="p" class="...Person">	
	3.3	@Component
		public class Person {
		}  	
		==
		 什么不加时， id的值为类的第一个字母变成小写，其他的保持不变
		<bean id="person" class="...Person">
	4、当执行完第三步以后，只要加有@Component注解的类就被放入到spring容器中了
	5、执行@Resource注解的规则
四、<context:component-scan 
   			base-package="cn.jd.spring.annotation"></context:component-scan>
	   支持的注解：
	   @Component，@Repository、@Service 或@Controller，
	   @Resource
	   @Autowired
	   @Qualifier
	   
	   @PostConstruct （init方法的注解）
	   @PreDestory		（destroy方法的注解）
五、
1、写一个类Person,有个属性String s,通过spring的配置文件给Person中的属性s赋值
2、写一个类Student,Student继承了Person
3、让Student把s属性打印出来

spring的配置文件
<bean id="person" class="com.itheima08.spring.extend.Person" abstract="true">
		<property name="s" value="aaa"></property>
	</bean>
	<!-- 
		parent 从spring容器的角度继承了person
	 -->
	<bean id="student" class="com.itheima08.spring.extend.Student" parent="person">
	</bean>
	
	<bean id="student2" class="com.itheima08.spring.extend.Student">
		<property name="s" value="aaaaa"></property>
	</bean>
	
public class Student extends Person{
	public Student(){
		System.out.println("student");
	}
	public void say(){
		System.out.println(this.getS());
	}
}

public class Person {
	public Person(){
		System.out.println("person");
	}
	private String s;

	public String getS() {
		return s;
	}

	public void setS(String s) {
		this.s = s;
	}	
}

说明：
    因为person在spring的配置文件中
    	<bean id="person" class="com.itheima08.spring.extend.Person" abstract="true">
    		所以spring容器为person创建对象, 若初始化不创建对象时，abstract="true";
        <bean id="student" class="com.itheima08.spring.extend.Student" parent="person">
        	所以spring容器要为student创建对象，但是对student创建对象的过程中要调用person的构造器
        	这个时候，如果不写parent属性，person中的所有的属性将直接为null,只有加了parent属性才能把
        	原来的person属性中的值继承过来
当两个类同时在spring容器中，如果两个类没有任何关系，则先实例化一个类，然后调用set方法赋值，然后再实例化另外一个类
当两个类同时在spring容器中，如果一个类依赖于另外一个类存在，则先把两个类实例化，然后再调用setter方法赋值
        	